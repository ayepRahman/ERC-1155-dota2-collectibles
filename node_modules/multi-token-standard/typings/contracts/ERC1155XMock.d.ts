/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter } from "ethers";
import { Provider } from "ethers/providers";
import { BigNumber } from "ethers/utils";
import { TransactionOverrides } from ".";

export class ERC1155XMock extends Contract {
  functions: {
    balanceOf(
      _address: string,
      _id: number | string | BigNumber
    ): Promise<BigNumber>;

    supportsInterface(_interfaceID: string): Promise<boolean>;

    getNonce(_signer: string): Promise<BigNumber>;

    balanceOfBatch(
      _owners: (string)[],
      _ids: (number | string | BigNumber)[]
    ): Promise<(BigNumber)[]>;

    recoverHashSigner(
      _hash: string,
      _r: string,
      _s: string,
      _v: number | string | BigNumber
    ): Promise<string>;

    writeValueInBin(
      _binValue: number | string | BigNumber,
      _index: number | string | BigNumber,
      _value: number | string | BigNumber
    ): Promise<BigNumber>;

    recoverApprovalSigner(
      _operator: string,
      _approved: boolean,
      _nonce: number | string | BigNumber,
      _sig: {
        v: number | string | BigNumber;
        r: string;
        s: string;
        nonce: number | string | BigNumber;
        sigPrefix: string;
      }
    ): Promise<string>;

    getIDBinIndex(
      _id: number | string | BigNumber
    ): Promise<{
      bin: BigNumber;
      index: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    recoverTransferSigner(
      _from: string,
      _to: string,
      _id: number | string | BigNumber,
      _value: number | string | BigNumber,
      _data: (string)[],
      _nonce: number | string | BigNumber,
      _sig: {
        v: number | string | BigNumber;
        r: string;
        s: string;
        nonce: number | string | BigNumber;
        sigPrefix: string;
      }
    ): Promise<string>;

    isApprovedForAll(_owner: string, _operator: string): Promise<boolean>;

    getValueInBin(
      _binValue: number | string | BigNumber,
      _index: number | string | BigNumber
    ): Promise<BigNumber>;

    batchMint(
      _to: string,
      _ids: (number | string | BigNumber)[],
      _values: (number | string | BigNumber)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mint(
      _to: string,
      _id: number | string | BigNumber,
      _value: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: (number | string | BigNumber)[],
      _values: (number | string | BigNumber)[],
      _data: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    sigSetApprovalForAll(
      _owner: string,
      _operator: string,
      _approved: boolean,
      _sig: {
        v: number | string | BigNumber;
        r: string;
        s: string;
        nonce: number | string | BigNumber;
        sigPrefix: string;
      },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _id: number | string | BigNumber,
      _value: number | string | BigNumber,
      _data: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mockMint(
      _to: string,
      _id: number | string | BigNumber,
      _value: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    ERC1155_BATCH_RECEIVED_VALUE(): Promise<string>;
    ERC1155_RECEIVED_VALUE(): Promise<string>;
    owner(): Promise<string>;
    isOwner(): Promise<boolean>;
  };
  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    TransferSingle(
      _operator: string | null,
      _from: string | null,
      _to: string | null,
      _id: null,
      _value: null
    ): EventFilter;

    TransferBatch(
      _operator: string | null,
      _from: string | null,
      _to: string | null,
      _ids: null,
      _values: null
    ): EventFilter;

    ApprovalForAll(
      _owner: string | null,
      _operator: string | null,
      _approved: null
    ): EventFilter;
  };
}
